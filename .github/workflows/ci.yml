name: CI

env:
  GH_TOKEN: ${{ github.token }}

on:
  push:
    branches: [main, develop]
    tags: ['*']
  pull_request:
    branches: [main, develop]

jobs:
  test:
    if: github.event_name == 'pull_request' || github.event_name == 'push'
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Bun
        uses: oven-sh/setup-bun@v2
        with:
          bun-version: latest

      - name: Install dependencies
        run: bun install

      - name: Run tests
        run: bun run test

  build:
    if: github.event_name == 'pull_request' || github.event_name == 'push'
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
    runs-on: ${{ matrix.os }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Bun
        uses: oven-sh/setup-bun@v2
        with:
          bun-version: latest

      - name: Install dependencies
        run: bun install

      - name: Build app
        run: bun run build:prod

      - name: Build Electron for ${{ matrix.os }}
        shell: bash
        run: |
          if [ "${{ matrix.os }}" == "ubuntu-latest" ]; then
            bunx electron-builder build --publish=never --linux
          elif [ "${{ matrix.os }}" == "windows-latest" ]; then
            bunx electron-builder build --publish=never --win
          elif [ "${{ matrix.os }}" == "macos-latest" ]; then
            bunx electron-builder build --publish=never --mac
          fi

      - name: Upload Linux files
        uses: actions/upload-artifact@v4
        with:
          name: opencode-ui-linux
          path: |
            release/*.AppImage
            release/*.deb
            release/*.rpm
        if: matrix.os == 'ubuntu-latest'

      - name: Upload MacOS file
        uses: actions/upload-artifact@v4
        with:
          name: opencode-ui-mac
          path: release/*.dmg
        if: matrix.os == 'macos-latest'

      - name: Upload Windows file
        uses: actions/upload-artifact@v4
        with:
          name: opencode-ui-windows
          path: release/*.exe
        if: matrix.os == 'windows-latest'

  release:
    if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/')
    needs: build
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Download Linux files
        uses: actions/download-artifact@v4
        with:
          name: opencode-ui-linux
          path: artifacts/linux

      - name: Download MacOS files
        uses: actions/download-artifact@v4
        with:
          name: opencode-ui-mac
          path: artifacts/mac

      - name: Download Windows files
        uses: actions/download-artifact@v4
        with:
          name: opencode-ui-windows
          path: artifacts/windows

      - name: create release
        run: gh release create ${{ github.ref_name }} --generate-notes

      - name: upload linux files to release
        run: gh release upload ${{ github.ref_name }} artifacts/linux/*.AppImage artifacts/linux/*.deb artifacts/linux/*.rpm

      - name: upload mac file to release
        run: gh release upload ${{ github.ref_name }} artifacts/mac/*.dmg

      - name: upload windows file to release
        run: gh release upload ${{ github.ref_name }} artifacts/windows/*.exe

  aur-release:
    if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/')
    #    if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/') || github.event_name == 'pull_request' # for tests in PR
    needs: build
    runs-on: ubuntu-latest
    container:
      image: archlinux:latest
    steps:
      - name: Setup pacman and create build user
        run: |
          pacman -Syu --noconfirm base-devel git openssh
          useradd -m builder
          echo "builder ALL=(ALL) NOPASSWD: ALL" >> /etc/sudoers

      - name: Setup SSH for AUR
        run: |
          mkdir -p /home/builder/.ssh
          echo "${{ secrets.AUR_SSH_KEY }}" > /home/builder/.ssh/aur_key
          chmod 600 /home/builder/.ssh/aur_key
          ssh-keyscan aur.archlinux.org >> /home/builder/.ssh/known_hosts
          chown -R builder:builder /home/builder/.ssh
          sudo -u builder git config --global core.sshCommand "ssh -i /home/builder/.ssh/aur_key -o StrictHostKeyChecking=no"

      - name: Checkout AUR repo
        run: |
          mkdir aur
          chown builder:builder aur
          chmod 0755 aur
          sudo -u builder git clone ssh://aur@aur.archlinux.org/opencode-ui-bin.git aur || (echo "Clone failed, listing directory:" && ls -la && exit 1)
          sudo -u builder git -C aur config user.email "contact@marmotz.dev"
          sudo -u builder git -C aur config user.name "Marmotz"

      - name: Get version from tag
        id: version
        run: |
          if [[ "${{ github.ref }}" == refs/tags/* ]]; then
            echo "version=${GITHUB_REF#refs/tags/v}" >> $GITHUB_OUTPUT
          else
            echo "version=0.0.0.pr${{ github.event.pull_request.number }}" >> $GITHUB_OUTPUT
          fi

      - name: Download Linux files
        uses: actions/download-artifact@v4
        with:
          name: opencode-ui-linux
          path: artifacts/linux

      - name: Calculate sha256sum
        id: sha256
        run: |
          cd artifacts/linux
          SHA=$(sha256sum opencode-ui-*.AppImage | cut -d' ' -f1)
          echo "sha256=$SHA" >> $GITHUB_OUTPUT

      - name: Update PKGBUILD
        run: |
          sudo -u builder sed -i "s|pkgver=.*|pkgver=${{ steps.version.outputs.version }}|" aur/PKGBUILD
          sudo -u builder sed -i "/sha256sums=/,/^)/c\\sha256sums=(\n  '${{ steps.sha256.outputs.sha256 }}'\n)" aur/PKGBUILD
          sudo -u builder sed -i "s/pkgrel=.*/pkgrel=1/" aur/PKGBUILD

      - name: Generate .SRCINFO
        run: |
          sudo -u builder bash -c "cd aur && makepkg --printsrcinfo" > aur/.SRCINFO

      - name: Commit and push to AUR
        run: |
          sudo -u builder git -C aur add PKGBUILD .SRCINFO
          sudo -u builder git -C aur commit -m "Update to ${{ steps.version.outputs.version }}"
          sudo -u builder git -C aur push
